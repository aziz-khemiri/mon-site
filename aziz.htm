<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>The Birthday Mystery - Édition Spéciale</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary: #FF6B35;
            --secondary: #FF8E53;
            --accent: #FFB347;
            --dark: #0A0A0A;
            --darker: #111;
            --light: #FFF5E6;
            --glow: rgba(255, 107, 53, 0.6);
        }

        body {
            background: linear-gradient(135deg, var(--dark) 0%, var(--darker) 100%);
            color: var(--light);
            font-family: 'Poppins', sans-serif;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow-x: hidden;
            position: relative;
            padding: 20px;
        }

        /* Effets de fond animés */
        .bg-effects {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            pointer-events: none;
        }

        .floating-orb {
            position: absolute;
            border-radius: 50%;
            filter: blur(40px);
            opacity: 0.1;
            animation: float 15s infinite ease-in-out;
        }

        .orb-1 {
            width: 300px;
            height: 300px;
            background: var(--primary);
            top: 10%;
            left: 10%;
            animation-delay: 0s;
        }

        .orb-2 {
            width: 400px;
            height: 400px;
            background: var(--secondary);
            top: 60%;
            right: 10%;
            animation-delay: -5s;
        }

        .orb-3 {
            width: 250px;
            height: 250px;
            background: var(--accent);
            bottom: 20%;
            left: 20%;
            animation-delay: -10s;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0) rotate(0deg); }
            33% { transform: translateY(-30px) rotate(120deg); }
            66% { transform: translateY(20px) rotate(240deg); }
        }

        /* Écrans */
        .screen {
            position: absolute;
            width: 100%;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            padding: 40px 20px;
            opacity: 0;
            transition: all 1s cubic-bezier(0.4, 0, 0.2, 1);
            pointer-events: none;
            transform: translateY(50px);
        }

        .active {
            opacity: 1;
            pointer-events: all;
            transform: translateY(0);
        }

        /* Cartes de contenu */
        .content-card {
            background: rgba(20, 20, 20, 0.85);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 107, 53, 0.2);
            border-radius: 24px;
            padding: 40px;
            max-width: 800px;
            width: 100%;
            box-shadow: 
                0 20px 40px rgba(0, 0, 0, 0.5),
                0 0 80px rgba(255, 107, 53, 0.1),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
            position: relative;
            overflow: hidden;
            margin: 20px;
        }

        .content-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, var(--primary), var(--secondary), var(--accent));
        }

        /* Typographie améliorée */
        h1 {
            font-size: clamp(2.5em, 5vw, 3.5em);
            margin-bottom: 20px;
            background: linear-gradient(135deg, var(--primary), var(--accent));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            text-shadow: 0 0 30px var(--glow);
            font-weight: 700;
            letter-spacing: 1px;
            line-height: 1.2;
        }

        h2 {
            font-size: clamp(2em, 4vw, 2.5em);
            margin-bottom: 25px;
            color: var(--light);
            font-weight: 600;
            line-height: 1.3;
        }

        p {
            font-size: clamp(1.1em, 2.5vw, 1.3em);
            margin-bottom: 25px;
            line-height: 1.6;
            color: rgba(255, 245, 230, 0.9);
            font-weight: 300;
        }

        /* Boutons améliorés */
        .btn {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            border: none;
            padding: 18px 45px;
            font-size: 1.2em;
            border-radius: 50px;
            cursor: pointer;
            margin-top: 30px;
            font-weight: 600;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            box-shadow: 
                0 10px 30px rgba(255, 107, 53, 0.4),
                0 0 0 1px rgba(255, 255, 255, 0.1);
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }

        .btn:hover {
            transform: translateY(-5px) scale(1.05);
            box-shadow: 
                0 15px 40px rgba(255, 107, 53, 0.6),
                0 0 0 1px rgba(255, 255, 255, 0.2);
        }

        .btn:hover::before {
            left: 100%;
        }

        .btn:active {
            transform: translateY(-2px) scale(1.02);
        }

        /* Conteneur d'indices amélioré */
        .clues-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 20px;
            margin: 40px 0;
            width: 100%;
            max-width: 700px;
        }

        .clue {
            aspect-ratio: 1;
            background: linear-gradient(135deg, rgba(40, 40, 40, 0.8), rgba(20, 20, 20, 0.9));
            border-radius: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 2em;
            cursor: pointer;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            border: 2px solid rgba(255, 107, 53, 0.3);
            position: relative;
            overflow: hidden;
            box-shadow: 
                0 10px 30px rgba(0, 0, 0, 0.3),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
            min-height: 100px;
        }

        .clue::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, var(--primary), var(--accent));
            opacity: 0;
            transition: opacity 0.3s;
        }

        .clue:hover {
            transform: translateY(-10px) scale(1.1) rotate(5deg);
            border-color: var(--primary);
            box-shadow: 
                0 20px 40px rgba(255, 107, 53, 0.4),
                0 0 60px rgba(255, 107, 53, 0.2);
        }

        .clue:hover::before {
            opacity: 0.1;
        }

        .clue.revealed {
            background: linear-gradient(135deg, var(--primary), var(--accent));
            color: var(--dark);
            cursor: default;
            transform: scale(1.05);
            border-color: transparent;
            box-shadow: 
                0 15px 35px rgba(255, 107, 53, 0.5),
                0 0 50px rgba(255, 107, 53, 0.3);
            font-size: 0.9em;
            padding: 10px;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .clue.revealed::after {
            content: '✨';
            position: absolute;
            font-size: 0.8em;
            top: 5px;
            right: 5px;
            animation: sparkle 2s infinite;
        }

        @keyframes sparkle {
            0%, 100% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.7; transform: scale(1.2); }
        }

        /* Barre de progression améliorée */
        .progress-container {
            width: 100%;
            max-width: 500px;
            margin: 30px 0;
        }

        .progress-label {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
            font-size: 1.1em;
            color: rgba(255, 245, 230, 0.8);
        }

        .progress {
            width: 100%;
            height: 12px;
            background: rgba(40, 40, 40, 0.8);
            border-radius: 10px;
            overflow: hidden;
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.5);
        }

        .progress-bar {
            height: 100%;
            background: linear-gradient(90deg, var(--primary), var(--accent));
            width: 0%;
            transition: width 0.8s cubic-bezier(0.4, 0, 0.2, 1);
            border-radius: 10px;
            position: relative;
            overflow: hidden;
        }

        .progress-bar::after {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
            animation: shimmer 2s infinite;
        }

        @keyframes shimmer {
            0% { left: -100%; }
            100% { left: 100%; }
        }

        /* Écran de fin amélioré */
        .celebration {
            font-size: clamp(3em, 8vw, 5em);
            margin: 20px 0;
            animation: celebrate 2s infinite ease-in-out;
            filter: drop-shadow(0 0 20px var(--glow));
        }

        @keyframes celebrate {
            0%, 100% { transform: scale(1) rotate(0deg); }
            25% { transform: scale(1.2) rotate(10deg); }
            50% { transform: scale(1.1) rotate(-5deg); }
            75% { transform: scale(1.15) rotate(5deg); }
        }

        .message-box {
            background: rgba(255, 107, 53, 0.1);
            border: 1px solid rgba(255, 107, 53, 0.3);
            border-radius: 20px;
            padding: 30px;
            margin: 25px 0;
            backdrop-filter: blur(10px);
        }

        /* Confetti amélioré */
        #confetti {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            display: none;
            z-index: 1000;
        }

        /* Animation de particules */
        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }

        .particle {
            position: absolute;
            background: var(--primary);
            border-radius: 50%;
            opacity: 0.3;
            animation: particle-float 20s infinite linear;
        }

        @keyframes particle-float {
            0% { transform: translateY(100vh) rotate(0deg); }
            100% { transform: translateY(-100px) rotate(360deg); }
        }

        /* Responsive */
        @media (max-width: 768px) {
            .content-card { 
                padding: 30px 20px; 
                margin: 10px;
            }
            .clues-container { 
                grid-template-columns: repeat(2, 1fr); 
                gap: 15px; 
            }
            .clue {
                min-height: 80px;
                font-size: 1.5em;
            }
            .clue.revealed {
                font-size: 0.8em;
            }
            .btn {
                padding: 15px 35px;
                font-size: 1.1em;
            }
        }

        @media (max-width: 480px) {
            .clues-container { 
                grid-template-columns: 1fr; 
                max-width: 300px;
            }
            .clue {
                min-height: 70px;
            }
            .btn { 
                padding: 15px 30px; 
                font-size: 1em; 
            }
            .content-card {
                padding: 25px 15px;
            }
        }
    </style>
</head>
<body>
    <!-- Effets de fond -->
    <div class="bg-effects">
        <div class="floating-orb orb-1"></div>
        <div class="floating-orb orb-2"></div>
        <div class="floating-orb orb-3"></div>
    </div>

    <!-- Particules animées -->
    <div class="particles" id="particles"></div>

    <!-- Écran d'introduction -->
    <div id="intro" class="screen active">
        <div class="content-card">
            <h1>🎂 Bienvenue, Dodo 🎂</h1>
            <div class="message-box">
                <p>Tu as été spécialement choisi(e) pour percer le <strong>Mystère d'Anniversaire</strong>...</p>
                <p>Une aventure unique t'attend, peuplée d'énigmes mystérieuses et de secrets bien gardés.</p>
            </div>
            <p>Prépare-toi à explorer l'inconnu et découvrir ce qui t'est destiné !</p>
            <button class="btn" id="startButton">🚀 Commencer l'Aventure</button>
        </div>
    </div>

    <!-- Écran de jeu -->
    <div id="game" class="screen">
        <div class="content-card">
            <h2>🔍 Trouve les Indices Cachés</h2>
            <p>Clique sur chaque mystérieux symbole pour révéler les indices qui te mèneront à la solution finale.</p>
            
            <div class="progress-container">
                <div class="progress-label">
                    <span>Progression</span>
                    <span id="progressText">0/5</span>
                </div>
                <div class="progress">
                    <div class="progress-bar" id="progressBar"></div>
                </div>
            </div>

            <div class="clues-container" id="cluesContainer"></div>
        </div>
    </div>

    <!-- Écran de fin -->
    <div id="end" class="screen">
        <div class="content-card">
            <div class="celebration">🎉✨</div>
            <h1>Mystère Résolu !</h1>
            <div class="message-box">
                <p>Quelqu'un, quelque part, sourit chaleureusement pendant que tu découvres ce message...</p>
                <p>Ta perspicacité et ta curiosité ont triomphé de tous les obstacles !</p>
            </div>
            <h2>🎂 Joyeux Anniversaire, Dodo ! 🧡</h2>
            <p>Que cette journée soit aussi merveilleuse que ton esprit d'aventurier !</p>
            <button class="btn" id="restartButton">🔄 Rejouer l'Aventure</button>
        </div>
    </div>

    <canvas id="confetti"></canvas>

    <script>
        // Éléments DOM
        const introScreen = document.getElementById('intro');
        const gameScreen = document.getElementById('game');
        const endScreen = document.getElementById('end');
        const startButton = document.getElementById('startButton');
        const restartButton = document.getElementById('restartButton');
        const cluesContainer = document.getElementById('cluesContainer');
        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('progressText');
        const confettiCanvas = document.getElementById('confetti');
        const particlesContainer = document.getElementById('particles');

        // Variables du jeu
        let cluesFound = 0;
        const totalClues = 5;

        // Énigmes mystérieuses
        const riddles = [
            '🌟 Les étoiles murmurent ton nom dans la nuit éternelle...',
            '🔮 Même les plus grands mystères cachent des secrets inavoués...',
            '😊 Un rire cristallin résonne dans l\'ombre, attendant ta découverte...',
            '🟠 Des lumières orangées dansent en ton honneur dans le crépuscule...',
            '🌌 L\'univers tout entier admire ta curiosité insatiable...'
        ];

        // Symboles mystérieux pour les indices
        const clueSymbols = ['🔍', '❓', '🔎', '💫', '🎯'];

        // Initialisation
        function init() {
            createParticles();
            generateClues();
        }

        // Créer des particules animées
        function createParticles() {
            for (let i = 0; i < 30; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.width = `${Math.random() * 10 + 5}px`;
                particle.style.height = particle.style.width;
                particle.style.left = `${Math.random() * 100}%`;
                particle.style.animationDelay = `${Math.random() * 20}s`;
                particle.style.animationDuration = `${Math.random() * 10 + 15}s`;
                particle.style.opacity = Math.random() * 0.3 + 0.1;
                particlesContainer.appendChild(particle);
            }
        }

        // Démarrer le jeu
        startButton.addEventListener('click', startGame);
        
        // Redémarrer le jeu
        restartButton.addEventListener('click', restartGame);

        function startGame() {
            // Transition entre écrans
            introScreen.classList.remove('active');
            setTimeout(() => {
                gameScreen.classList.add('active');
                resetGame();
            }, 500);
        }

        function resetGame() {
            cluesFound = 0;
            updateProgress();
            generateClues();
        }

        function generateClues() {
            cluesContainer.innerHTML = '';
            
            for (let i = 0; i < totalClues; i++) {
                const clue = document.createElement('div');
                clue.className = 'clue';
                clue.textContent = clueSymbols[i];
                clue.setAttribute('data-index', i);
                
                clue.addEventListener('click', handleClueClick);
                cluesContainer.appendChild(clue);
            }
        }

        function handleClueClick(event) {
            const clue = event.currentTarget;
            const index = parseInt(clue.getAttribute('data-index'));
            
            if (!clue.classList.contains('revealed')) {
                // Animation de révélation
                clue.style.transform = 'scale(1.2) rotate(360deg)';
                setTimeout(() => {
                    clue.textContent = riddles[index];
                    clue.classList.add('revealed');
                    clue.style.transform = 'scale(1.05)';
                    
                    // Mettre à jour la progression
                    cluesFound++;
                    updateProgress();
                    
                    // Vérifier si le jeu est terminé
                    if (cluesFound === totalClues) {
                        setTimeout(endGame, 1500);
                    }
                }, 600);
            }
        }

        function updateProgress() {
            const progress = (cluesFound / totalClues) * 100;
            progressBar.style.width = progress + '%';
            progressText.textContent = `${cluesFound}/${totalClues}`;
        }

        function endGame() {
            // Transition vers l'écran de fin
            gameScreen.classList.remove('active');
            setTimeout(() => {
                endScreen.classList.add('active');
                startConfetti();
            }, 500);
        }

        function restartGame() {
            endScreen.classList.remove('active');
            setTimeout(() => {
                introScreen.classList.add('active');
                confettiCanvas.style.display = 'none';
            }, 500);
        }

        function startConfetti() {
            confettiCanvas.style.display = 'block';
            const ctx = confettiCanvas.getContext('2d');
            confettiCanvas.width = window.innerWidth;
            confettiCanvas.height = window.innerHeight;
            
            const confettiColors = ['#FF6B35', '#FF8E53', '#FFB347', '#FF4500', '#FF6347'];
            const confettiPieces = [];
            
            // Créer les particules de confetti
            for (let i = 0; i < 200; i++) {
                confettiPieces.push({
                    x: Math.random() * window.innerWidth,
                    y: Math.random() * window.innerHeight - window.innerHeight,
                    r: Math.random() * 8 + 3,
                    d: Math.random() * 200,
                    color: confettiColors[Math.floor(Math.random() * confettiColors.length)],
                    tilt: Math.floor(Math.random() * 10) - 5,
                    shape: Math.random() > 0.5 ? 'circle' : 'rect'
                });
            }
            
            // Animer le confetti
            function drawConfetti() {
                ctx.clearRect(0, 0, confettiCanvas.width, confettiCanvas.height);
                
                confettiPieces.forEach(p => {
                    ctx.save();
                    ctx.translate(p.x, p.y);
                    ctx.rotate(p.tilt * Math.PI / 180);
                    
                    ctx.fillStyle = p.color;
                    
                    if (p.shape === 'circle') {
                        ctx.beginPath();
                        ctx.arc(0, 0, p.r, 0, Math.PI * 2);
                        ctx.fill();
                    } else {
                        ctx.fillRect(-p.r, -p.r/2, p.r*2, p.r);
                    }
                    
                    ctx.restore();
                    
                    p.tilt += 0.1;
                    p.y += 2 + Math.random() * 2;
                    p.x += Math.sin(p.d) * 0.5;
                    
                    if (p.y > window.innerHeight) {
                        p.y = -20;
                        p.x = Math.random() * window.innerWidth;
                    }
                });
                
                requestAnimationFrame(drawConfetti);
            }
            
            drawConfetti();
        }

        // Initialiser le jeu au chargement
        window.addEventListener('load', init);
    </script>
</body>
</html>